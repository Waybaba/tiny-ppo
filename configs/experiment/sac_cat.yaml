# @package _global_

# to execute this experiment run:
# python train.py experiment=example

defaults:
  - /net@net_c1: default.yaml
  - /actor: null
  - _self_

# SAC specific

global_cfg: # would be passed to actor, critic1, critic2, policy, env
  actor_input:
    history_merge_method: "cat_mlp" # cat_mlp or stack_rnn or none
    obs_type: "normal" # normal or oracle
    trace_direction: "next" # prev or next
    history_num: ${env.delay} # ! TODO for case 0 and 1
    burnin_num: 0 # only works for stack_rnn
    noise_act_debug: false
    obs_pred: 
      turn_on: false
      feat_dim: 256
      middle_detach: true
      input_type: "feat" # obs or feat
      net_type: vae # vae or mlp
      norm_kl_loss_weight: 0.01
      auto_kl_target: 50
      pred_loss_weight: 0.1
      auto_kl_optim:
        _target_: torch.optim.Adam
        _partial_: true
        lr: ${actor_optim.lr}
      optim:
        _target_: torch.optim.Adam
        _partial_: true
        lr: ${actor_optim.lr}
      net:
        _target_: src.runner.ObsPredNet
        _partial_: true
        device: ${device}
        feat_dim: ${global_cfg.actor_input.obs_pred.feat_dim}
        net_type: ${global_cfg.actor_input.obs_pred.net_type}
        encoder_net: 
          _target_: src.runner.RNN_MLP_Net
          _partial_: true
          rnn_layer_num: 0
          rnn_hidden_layer_size: 256
          mlp_hidden_sizes: [512,512]
          mlp_softmax: false
          dropout: 0.1
        decoder_net:
          _target_: src.runner.RNN_MLP_Net
          _partial_: true
          rnn_layer_num: 0
          rnn_hidden_layer_size: 256
          mlp_hidden_sizes: [256]
          mlp_softmax: false
    obs_encode:
      turn_on: true
      feat_dim: 256
      train_eval_async: true # true is VLOG, false is normal training. only affect the training input
      before_policy_detach: true # whether detach the input before policy net. Detail: there is no certain answer for which one is better.
      norm_kl_loss_weight: 0.01
      auto_kl_target: 50
      pred_loss_weight: 0.
      optim:
        _target_: torch.optim.Adam
        _partial_: true
        lr: ${actor_optim.lr}
      auto_kl_optim:
        _target_: torch.optim.Adam
        _partial_: true
        lr: ${actor_optim.lr}
      net:
        _target_: src.runner.ObsEncodeNet
        _partial_: true
        feat_dim: ${global_cfg.actor_input.obs_encode.feat_dim}
        device: ${device}
        encoder_net: 
          _target_: src.runner.RNN_MLP_Net
          _partial_: true
          rnn_layer_num: 0
          rnn_hidden_layer_size: 256
          mlp_hidden_sizes: [512,512]
          mlp_softmax: false
          dropout: 0.0
        decoder_net:
          _target_: src.runner.RNN_MLP_Net
          _partial_: true
          rnn_layer_num: 0
          rnn_hidden_layer_size: 256
          mlp_hidden_sizes: [512,512]
          mlp_softmax: false
          dropout: 0.0
      
  critic_input:
    history_merge_method: "none" # cat_mlp or stack_rnn or none
    obs_type: "oracle" # normal or oracle
    history_num: ${global_cfg.actor_input.history_num}
    burnin_num: ${global_cfg.actor_input.burnin_num}
  log_interval: 100
  log_instant_commit: true # false would make the wandb sync only once per epoch
actor:
  _target_: src.runner.CustomRecurrentActorProb
  _partial_: true
  device: ${device}
  global_cfg: ${global_cfg}
  net: 
    _target_: src.runner.RNN_MLP_Net
    _partial_: true
    rnn_layer_num: 0
    rnn_hidden_layer_size: 256
    mlp_hidden_sizes: [256,256]
    mlp_softmax: false
  unbounded: true
  conditioned_sigma: true
  pure_random: false
critic1:
  _target_: src.runner.CustomRecurrentCritic
  _partial_: true
  device: ${device}
  global_cfg: ${global_cfg}
  net: 
    _target_: src.runner.RNN_MLP_Net
    _partial_: true
    rnn_layer_num: 0
    rnn_hidden_layer_size: 256
    mlp_hidden_sizes: [256,256]
    mlp_softmax: false

critic2: ${critic1}
policy:
  _target_: src.runner.CustomSACPolicy
  _partial_: true
  tau: 0.005
  gamma: 0.99
  global_cfg: ${global_cfg}
  estimation_step: 1
  deterministic_eval: true
  alpha:
    _target_: builtins.tuple
    _args_:
      - - "neg_act_num" # target_entropy - float -6.0 or str "neg_act_num"
        - _target_: torch.zeros
          size: 
            _target_: builtins.tuple
            _args_:
              - - 1
          requires_grad: true
          device: ${device}
        - _target_: torch.optim.Adam
          _partial_: true
          lr: ${actor_optim.lr}
runner:
  _target_: src.runner.SACRunner
  _partial_: true
critic1_optim:
  _target_: ${actor_optim._target_}
  _partial_: true
  lr: ${actor_optim.lr}
critic2_optim: ${critic1_optim}
actor_optim:
  _target_: torch.optim.Adam
  _partial_: true
  lr: 3e-4


# common - for all algorithms
env:
  name: HalfCheetah-v4
  train_num: 1
  test_num: 1
  delay: 0
  global_cfg: ${global_cfg}
collector:
  train_collector:
    _target_: tianshou.data.Collector
    _partial_: true
    buffer: 
      _target_: tianshou.data.ReplayBuffer
      size: 1000000
      # stack_num: 8
      # buffer_num: 2
    exploration_noise: true
  test_collector:
    _target_: tianshou.data.Collector
    _partial_: true
trainer:
  _target_: tianshou.trainer.OffpolicyTrainer
  _partial_: true
  max_epoch: 200
  step_per_epoch: 5000
  step_per_collect: 1
  update_per_step: 1
  episode_per_test: 10
  batch_size: 256
  test_in_train: false
start_timesteps: 10000

# common - for all tasks (task_name, tags, output_dir, device)
task_name: "RL"
tags: ["debug"]
